@startuml
center header ASTM Strategic Coordination
title Nominal planning: not permitted conflict with equal priority

participant "DSS"
participant "Test Driver" as TD
participant "Tested USS\n(flight 1)" as T_USS
participant "Control USS\n(flight 2)" as C_USS

== Attempt to plan flight in conflict ==
TD -> C_USS: PUT /inject/flight/{flight2}\n{"state": "Accepted", "volumes": //time_range_B//}
TD <- C_USS: 200 Ok - Operational Intent 2 created\n{"result": "Planned"}

TD -> C_USS: PUT /inject/flight/{flight2}\n{"state": "Activated"}
TD <- C_USS: 200 Ok - Operational Intent 2 activated\n{"result": "ReadyToFly"}

TD -> DSS: POST /dss/v1/operational_intent_references/query\nwith area_of_interest encompassing volume of flight 2
TD <- DSS: 200 Ok - returns Operational Intent Reference 2 managed by Control USS
TD -> C_USS: GET /uss/v1/operational_intents/{opintent2}
TD <- C_USS: 200 Ok - returns Operational Intent 2

TD -> DSS: POST /dss/v1/operational_intent_references/query\nwith area_of_interest encompassing volume of flight 1
TD <- DSS: 200 Ok
TD -> T_USS: PUT /inject/flight/{flight1}\n{"state": "Accepted", "volumes": //time_range_B//}
TD <- T_USS: 200 Ok - Planning rejected\n{"result": "ConflictWithFlight"}
note left: Per ""astm.f3548.v21.SCD0035""
TD -> DSS: POST /dss/v1/operational_intent_references/query\nwith area_of_interest encompassing volume of flight 1
TD <- DSS: 200 Ok - no additional operational intent found


== Attempt to activate flight in conflict ==
TD -> DSS: POST /dss/v1/operational_intent_references/query\nwith area_of_interest encompassing volume of flight 1
TD <- DSS: 200 Ok
TD -> T_USS: PUT /inject/flight/{flight1}\n{"state": "Activated", "volumes": //time_range_B//}
TD <- T_USS: 200 Ok - Activation rejected\n{"result": "ConflictWithFlight"}
note left: Per ""astm.f3548.v21.SCD0045""
TD -> DSS: POST /dss/v1/operational_intent_references/query\nwith area_of_interest encompassing volume of flight 1
TD <- DSS: 200 Ok - no additional operational intent found


== Attempt to modify planned flight in conflict ==
TD -> T_USS: PUT /inject/flight/{flight1}\n{"state": "Accepted", "volumes": //time_range_A//}
TD <- T_USS: 200 Ok - Operational Intent 1 created\n{"result": "Planned"}

TD -> DSS: POST /dss/v1/operational_intent_references/query\nwith area_of_interest encompassing flights volumes
TD <- DSS: 200 Ok - returns Operational Intent Reference 1 managed by Tested USS
TD -> T_USS: GET /uss/v1/operational_intents/{opintent1}
TD <- T_USS: 200 Ok - returns Operational Intent 1

TD -> T_USS: PUT /inject/flight/{flight1}\n{"volumes": //time_range_B//}
TD <- T_USS: 200 Ok - Modification rejected\n{"result": "ConflictWithFlight"}
note left: Per ""astm.f3548.v21.SCD0040""

TD -> DSS: POST /dss/v1/operational_intent_references/query\nwith area_of_interest encompassing volume of flight 1
TD <- DSS: 200 Ok - returns Operational Intent Reference 1 managed by Tested USS if it still exists
alt Operational Intent Reference 1 still exists
  TD -> T_USS: GET /uss/v1/operational_intents/{opintent1}
  TD <- T_USS: 200 Ok - returns Operational Intent 1
end

== Attempt to modify activated flight in conflict ==
TD -> T_USS: PUT /inject/flight/{flight1}\n{"state": "Activated"}
TD <- T_USS: 200 Ok - Operational Intent 1 activated\n{"result": "ReadyToFly"}

TD -> DSS: POST /dss/v1/operational_intent_references/query\nwith area_of_interest encompassing flights volumes
TD <- DSS: 200 Ok - returns Operational Intent Reference 1 managed by Tested USS
TD -> T_USS: GET /uss/v1/operational_intents/{opintent1}
TD <- T_USS: 200 Ok - returns Operational Intent 1

TD -> T_USS: PUT /inject/flight/{flight1}\n{"volumes": //time_range_B//}
TD <- T_USS: 200 Ok - Modification rejected\n{"result": "ConflictWithFlight"}
note left: Per ""astm.f3548.v21.SCD0050""

TD -> DSS: POST /dss/v1/operational_intent_references/query\nwith area_of_interest encompassing volume of flight 1
TD <- DSS: 200 Ok - returns Operational Intent Reference 1 managed by Tested USS if it still exists
alt Operational Intent Reference 1 still exists
  TD -> T_USS: GET /uss/v1/operational_intents/{opintent1}
  TD <- T_USS: 200 Ok - returns Operational Intent 1
end

== Modify activated flight with pre-existing conflict ==

TD -> T_USS: PUT /inject/flight/{flight1}\n{"state": "Activated"}
TD <- T_USS: 200 Ok - Operational Intent 1 activated\n{"result": "ReadyToFly"}

TD -> DSS: POST /dss/v1/operational_intent_references/query\nwith area_of_interest encompassing flights volumes
TD <- DSS: 200 Ok - returns Operational Intent Reference 1 managed by Tested USS
TD -> T_USS: GET /uss/v1/operational_intents/{opintent1}
TD <- T_USS: 200 Ok - returns Operational Intent 1

TD -> C_USS: PUT /inject/flight/{flight2}\n{"state": "Nonconforming", "off_nominal_volumes": //time_range_A//}
alt Control USS does not support CMSA role
  TD <- C_USS: 200 Ok - Transition rejected because USS does not support CMSA role\n{"result": "Rejected"}
  note over TD, C_USS: Execution of scenario stops without failing

else Control USS supports CMSA role
  TD <- C_USS: 200 Ok - Operational Intent 2 declared non-conforming\n{"result": "Planned"}

  TD -> DSS: POST /dss/v1/operational_intent_references/query\nwith area_of_interest encompassing volume of flight 2
  TD <- DSS: 200 Ok - returns Operational Intent Reference 2 managed by Control USS
  TD -> C_USS: GET /uss/v1/operational_intents/{opintent2}
  TD <- C_USS: 200 Ok - returns Operational Intent 2

  TD -> T_USS: PUT /inject/flight/{flight1}\n{"volumes": //time_range_A_extended//}
  note left: Both alternatives are valid and this does not validate a requirement
  alt Tested USS allow the modification
    TD <- T_USS: 200 Ok - Operational Intent 1 modified\n{"result": "ReadyToFly"}

  else Tested USS disallows the modification
    TD <- T_USS: 200 Ok - Modification rejected\n{"result": "Rejected"}

  end

  TD -> DSS: POST /dss/v1/operational_intent_references/query\nwith area_of_interest encompassing volume of flight 1
  TD <- DSS: 200 Ok - returns Operational Intent Reference 1 managed by Tested USS if it still exists
  alt Operational Intent Reference 1 still exists
    TD -> T_USS: GET /uss/v1/operational_intents/{opintent1}
    TD <- T_USS: 200 Ok - returns Operational Intent 1
  end

end

@enduml
