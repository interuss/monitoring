{
  "scenarios": {
    "scenarios.astm.netrid.v19.dp_behavior.DisplayProviderBehavior": {
      "Setup": {
        "Clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      }
    },
    "scenarios.astm.netrid.v19.dss.heavy_traffic_concurrent.HeavyTrafficConcurrent": {
      "Concurrent Requests": {
        "Search Available ISAs": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ],
        "Search Deleted ISAs": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ]
      },
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      }
    },
    "scenarios.astm.netrid.v19.dss.isa_expiry.ISAExpiry": {
      "ISA Expiry": {
        "ISA Expiry": [
          "An expired ISA can be queried by its ID",
          "Expired ISAs are not part of search results"
        ]
      },
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      }
    },
    "scenarios.astm.netrid.v19.dss.isa_simple.ISASimple": {
      "Delete ISA": {
        "Search ISA": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ]
      },
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      },
      "Update and search ISA": {
        "Search by area only": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ],
        "Search by earliest time (excluded)": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ],
        "Search by earliest time (included)": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ],
        "Search by latest time (excluded)": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ],
        "Search by latest time (included)": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ]
      }
    },
    "scenarios.astm.netrid.v19.dss.isa_subscription_interactions.ISASubscriptionInteractions": {
      "ISA Subscription Interactions": {
        "New subscription within ISA is mutated to ISA boundary": [
          "Subscription that only barely overlaps the ISA contains the ISA"
        ]
      },
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      }
    },
    "scenarios.astm.netrid.v19.dss.isa_validation.ISAValidation": {
      "ISA Validation": {
        "ISA Validation": [
          "ISA missing outline",
          "ISA missing volume",
          "ISA missing extents"
        ]
      },
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      }
    },
    "scenarios.astm.netrid.v19.dss.subscription_simple.SubscriptionSimple": {
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      },
      "Subscription Simple": {
        "Create subscription validation": [
          "Create subscription",
          "Response to subscription creation contains a subscription",
          "Returned subscription has an ID",
          "Returned subscription ID is correct",
          "Returned subscription has an owner",
          "Returned subscription owner is correct",
          "Returned notification index is 0 if present",
          "Returned subscription has an ISA URL",
          "Returned ISA URL has correct base URL",
          "Returned subscription has a start time",
          "Returned start time is correct",
          "Returned subscription has an end time",
          "Returned end time is correct",
          "Returned subscription has a version",
          "Generated subscription version has proper format"
        ],
        "Delete Subscription": [
          "Missing version prevents deletion",
          "Incorrect version prevents deletion",
          "Returned notification index is equal to or greater than 0",
          "Returned subscription has an ID",
          "Returned subscription ID is correct",
          "Returned subscription has an owner",
          "Returned subscription owner is correct",
          "Returned subscription has an ISA URL",
          "Returned ISA URL has correct base URL",
          "Returned subscription has a start time",
          "Returned start time is correct",
          "Returned subscription has an end time",
          "Returned end time is correct",
          "Returned subscription has a version",
          "Non-mutated subscription keeps the same version",
          "Generated subscription version has proper format"
        ],
        "Mutate Subscription": [
          "Subscription can be mutated",
          "Response to subscription mutation contains a subscription",
          "Returned subscription ID is correct",
          "Returned subscription has an owner",
          "Returned subscription owner is correct",
          "Returned notification index is equal to or greater than 0",
          "Returned subscription has an ID",
          "Returned subscription ID is correct",
          "Returned subscription has an ISA URL",
          "Returned ISA URL has correct base URL",
          "Returned subscription has a start time",
          "Returned start time is correct",
          "Returned subscription has an end time",
          "Returned ISA URL has correct base URL",
          "Returned start time is correct",
          "Returned end time is correct",
          "Returned subscription has a version",
          "Mutated subscription version is updated",
          "Generated subscription version has proper format"
        ],
        "Query Deleted Subscription": [
          "Query by subscription ID should fail",
          "Search for all subscriptions in ISA area",
          "Search area that represents a loop is not allowed",
          "Deleted subscription should not be present in search results"
        ],
        "Query Existing Subscription": [
          "Get Subscription by ID",
          "Search for all subscriptions in ISA area",
          "Created Subscription is in search results",
          "No huge search area allowed",
          "Returned subscription ID is correct",
          "Returned subscription has an owner",
          "Returned subscription owner is correct",
          "Returned notification index is equal to or greater than 0",
          "Returned subscription has an ID",
          "Returned subscription ID is correct",
          "Returned subscription has an ISA URL",
          "Returned ISA URL has correct base URL",
          "Returned subscription has a start time",
          "Returned start time is correct",
          "Returned subscription has an end time",
          "Returned ISA URL has correct base URL",
          "Returned start time is correct",
          "Returned end time is correct",
          "Returned subscription has a version",
          "Non-mutated subscription keeps the same version",
          "Generated subscription version has proper format"
        ]
      }
    },
    "scenarios.astm.netrid.v19.dss.subscription_validation.SubscriptionValidation": {
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      },
      "Subscription duration limitations": {
        "Try to create too-long subscription": [
          "Too-long subscription creation rejected"
        ],
        "Try to extend subscription": [
          "Valid subscription created",
          "Subscription duration limited during update"
        ]
      },
      "Subscription quantity limitations": {
        "Clean up subscriptions": [
          "Successful subscription search query",
          "Subscription can be deleted"
        ],
        "Create maximum number of subscriptions": [
          "Create up to the maximum allowed number of subscriptions in an area"
        ],
        "Exceed maximum number of subscriptions": [
          "Enforce maximum number of subscriptions for an area"
        ]
      }
    },
    "scenarios.astm.netrid.v19.dss.token_validation.TokenValidation": {
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      },
      "Token validation": {
        "Token validation": [
          "Read scope cannot create an ISA",
          "Missing token prevents creating an ISA",
          "Fake token prevents creating an ISA",
          "Correct token and scope can create ISA",
          "Missing token prevents reading an ISA",
          "Fake token prevents reading an ISA",
          "Read scope cannot mutate an ISA",
          "Missing token prevents mutating an ISA",
          "Proper token is allowed to search for ISAs",
          "Fake token cannot mutate an ISA",
          "Fake token cannot search for ISAs",
          "Missing token cannot search for ISAs",
          "Read scope cannot delete an ISA",
          "Missing token prevents ISA deletion",
          "Fake token cannot delete an ISA",
          "Correct token and scope can delete ISA",
          "Notified subscriber"
        ]
      }
    },
    "scenarios.astm.netrid.v19.dss_interoperability.DSSInteroperability": {
      "Interoperability sequence": {
        "S1": [
          "ISA[P] created with proper response"
        ],
        "S10": [
          "ISA[P] created with proper response",
          "All Subscription[i] 1\u2264i\u2264n returned in subscribers"
        ],
        "S11": [
          "ISA[P] deleted with proper response",
          "All Subscription[i] 1\u2264i\u2264n returned in subscribers"
        ],
        "S12": [
          "ISA[P] created with proper response",
          "None of Subscription[i] 1\u2264i\u2264n returned in subscribers"
        ],
        "S13": [
          "Subscriptions queried successfully",
          "No Subscription[i] 1\u2264i\u2264n returned with proper response"
        ],
        "S14": [
          "404 with proper response"
        ],
        "S15": [
          "ISA[P] deleted with proper response",
          "None of Subscription[i] 1\u2264i\u2264n returned in subscribers with proper response"
        ],
        "S16": [
          "Subscription[n] created with proper response",
          "service_areas does not include ISA from S12"
        ],
        "S2": [
          "Subscription[n] created with proper response",
          "service_areas includes ISA from S1",
          "ID of ISA from S1 is properly synchronized with all DSS",
          "Owner of ISA from S1 is properly synchronized with all DSS",
          "URL of ISA from S1 is properly synchronized with all DSS",
          "Start/end times of ISA from S1 are properly synchronized with all DSS"
        ],
        "S3": [
          "Subscription[P] returned with proper response",
          "Subscription[P] ID is properly synchronized with all DSS",
          "Subscription[P] owner is properly synchronized with all DSS",
          "Subscription[P] URL is properly synchronized with all DSS",
          "Subscription[P] start/end times are properly synchronized with all DSS",
          "Subscription[P] notification count is properly synchronized with all DSS"
        ],
        "S4": [
          "Can query all Subscriptions in area from all DSSs"
        ],
        "S5": [
          "Can get ISA from primary DSS",
          "Can modify ISA in primary DSS"
        ],
        "S7": [
          "404 with proper response"
        ],
        "S8": [
          "Subscriptions queried successfully",
          "No Subscription[i] 1\u2264i\u2264n returned with proper response"
        ],
        "S9": [
          "Subscription[n] created with proper response",
          "service_areas does not include ISA from S1"
        ]
      },
      "Prerequisites": {
        "Test environment requirements": [
          "DSS instance is reachable"
        ]
      }
    },
    "scenarios.astm.netrid.v19.misbehavior.Misbehavior": {
      "Invalid requests": {
        "Unauthenticated requests": [
          "Missing credentials"
        ]
      }
    },
    "scenarios.astm.netrid.v19.networked_uas_disconnect.NetworkedUASDisconnect": {
      "Networked UAS disconnect": {
        "Service Provider polling": [
          "Premature flight",
          "Missing flight",
          "Lingering flight",
          "Flights data format",
          "Recent positions timestamps",
          "Recent positions for aircraft crossing the requested area boundary show only one position before or after crossing",
          "Successful observation",
          "Minimal obfuscation distance of individual flights",
          "Individual flights obfuscation",
          "Minimal obfuscation distance of multiple flights clusters",
          "Clustering count",
          "Minimal display area of clusters",
          "Duplicate flights",
          "Premature flight",
          "Missing flight",
          "Lingering flight",
          "Telemetry being used when present"
        ]
      }
    },
    "scenarios.astm.netrid.v19.nominal_behavior.NominalBehavior": {
      "Nominal flight": {
        "Injection": [
          "Valid flight"
        ],
        "Observer polling": [
          "Minimal obfuscation distance of individual flights",
          "Individual flights obfuscation",
          "Minimal obfuscation distance of multiple flights clusters",
          "Clustering count",
          "Minimal display area of clusters",
          "Premature flight",
          "Missing flight",
          "Lingering flight"
        ],
        "Service Provider polling": [
          "Premature flight",
          "Missing flight",
          "Lingering flight"
        ]
      }
    },
    "scenarios.astm.netrid.v19.operator_interactions.OperatorInteractions": {
      "Failed ISA": {
        "Enumerate operator notifications": [
          "Operator notified of discoverability failure"
        ],
        "Inject flight": [
          "Flight failed"
        ]
      },
      "In-flight notifications": {
        "Poll Service Provider": [
          "Insufficient telemetry operator notification",
          "Missing data operator notification"
        ]
      }
    },
    "scenarios.astm.netrid.v19.sp_notification_behavior.ServiceProviderNotificationBehavior": {
      "Service Provider notification behavior": {
        "Injection": [
          "Valid flight"
        ],
        "Mock USS Subscription": [
          "Subscription creation succeeds"
        ]
      },
      "Setup": {
        "Clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      }
    },
    "scenarios.astm.netrid.v19.sp_operator_notify_missing_fields.SpOperatorNotifyMissingFields": {
      "Missing fields flight": {
        "Injection": [
          "Valid flight"
        ]
      }
    },
    "scenarios.astm.netrid.v19.sp_operator_notify_slow_update.ServiceProviderNotifiesSlowUpdates": {
      "Slow updates flight": {
        "Injection": [
          "Valid flight"
        ],
        "Service Provider polling": [
          "Premature flight",
          "Missing flight",
          "Lingering flight"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.dp_behavior.DisplayProviderBehavior": {
      "Setup": {
        "Clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.dss.heavy_traffic_concurrent.HeavyTrafficConcurrent": {
      "Concurrent Requests": {
        "Search Available ISAs": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ],
        "Search Deleted ISAs": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ]
      },
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.dss.isa_expiry.ISAExpiry": {
      "ISA Expiry": {
        "ISA Expiry": [
          "An expired ISA can be queried by its ID",
          "Expired ISAs are not part of search results"
        ]
      },
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.dss.isa_simple.ISASimple": {
      "Delete ISA": {
        "Search ISA": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ]
      },
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      },
      "Update and search ISA": {
        "Search by area only": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ],
        "Search by earliest time (excluded)": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ],
        "Search by earliest time (included)": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ],
        "Search by latest time (excluded)": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ],
        "Search by latest time (included)": [
          "ISAs search response format",
          "ISA ID matches",
          "ISA version format",
          "ISA version matches",
          "ISA start time matches",
          "ISA end time matches",
          "ISA URL matches"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.dss.isa_subscription_interactions.ISASubscriptionInteractions": {
      "ISA Subscription Interactions": {
        "New subscription within ISA is mutated to ISA boundary": [
          "Subscription that only barely overlaps the ISA contains the ISA"
        ]
      },
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.dss.isa_validation.ISAValidation": {
      "ISA Validation": {
        "ISA Validation": [
          "ISA missing outline",
          "ISA missing volume",
          "ISA missing extents"
        ]
      },
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.dss.subscription_simple.SubscriptionSimple": {
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      },
      "Subscription Simple": {
        "Create subscription validation": [
          "Create subscription",
          "Response to subscription creation contains a subscription",
          "Returned subscription has an ID",
          "Returned subscription ID is correct",
          "Returned subscription has an owner",
          "Returned subscription owner is correct",
          "Returned notification index is 0 if present",
          "Returned subscription has an ISA URL",
          "Returned ISA URL has correct base URL",
          "Returned subscription has a start time",
          "Returned start time is correct",
          "Returned subscription has an end time",
          "Returned end time is correct",
          "Returned subscription has a version",
          "Generated subscription version has proper format"
        ],
        "Delete Subscription": [
          "Missing version prevents deletion",
          "Incorrect version prevents deletion",
          "Returned notification index is equal to or greater than 0",
          "Returned subscription has an ID",
          "Returned subscription ID is correct",
          "Returned subscription has an owner",
          "Returned subscription owner is correct",
          "Returned subscription has an ISA URL",
          "Returned ISA URL has correct base URL",
          "Returned subscription has a start time",
          "Returned start time is correct",
          "Returned subscription has an end time",
          "Returned end time is correct",
          "Returned subscription has a version",
          "Non-mutated subscription keeps the same version",
          "Generated subscription version has proper format"
        ],
        "Mutate Subscription": [
          "Subscription can be mutated",
          "Response to subscription mutation contains a subscription",
          "Returned subscription ID is correct",
          "Returned subscription has an owner",
          "Returned subscription owner is correct",
          "Returned notification index is equal to or greater than 0",
          "Returned subscription has an ID",
          "Returned subscription ID is correct",
          "Returned subscription has an ISA URL",
          "Returned ISA URL has correct base URL",
          "Returned subscription has a start time",
          "Returned start time is correct",
          "Returned subscription has an end time",
          "Returned ISA URL has correct base URL",
          "Returned start time is correct",
          "Returned end time is correct",
          "Returned subscription has a version",
          "Mutated subscription version is updated",
          "Generated subscription version has proper format"
        ],
        "Query Deleted Subscription": [
          "Query by subscription ID should fail",
          "Search for all subscriptions in ISA area",
          "Search area that represents a loop is not allowed",
          "Deleted subscription should not be present in search results"
        ],
        "Query Existing Subscription": [
          "Get Subscription by ID",
          "Search for all subscriptions in ISA area",
          "Created Subscription is in search results",
          "No huge search area allowed",
          "Returned subscription ID is correct",
          "Returned subscription has an owner",
          "Returned subscription owner is correct",
          "Returned notification index is equal to or greater than 0",
          "Returned subscription has an ID",
          "Returned subscription ID is correct",
          "Returned subscription has an ISA URL",
          "Returned ISA URL has correct base URL",
          "Returned subscription has a start time",
          "Returned start time is correct",
          "Returned subscription has an end time",
          "Returned ISA URL has correct base URL",
          "Returned start time is correct",
          "Returned end time is correct",
          "Returned subscription has a version",
          "Non-mutated subscription keeps the same version",
          "Generated subscription version has proper format"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.dss.subscription_validation.SubscriptionValidation": {
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      },
      "Subscription duration limitations": {
        "Try to create too-long subscription": [
          "Too-long subscription creation rejected"
        ],
        "Try to extend subscription": [
          "Valid subscription created",
          "Subscription duration limited during update"
        ]
      },
      "Subscription quantity limitations": {
        "Clean up subscriptions": [
          "Successful subscription search query",
          "Subscription can be deleted"
        ],
        "Create maximum number of subscriptions": [
          "Create up to the maximum allowed number of subscriptions in an area"
        ],
        "Exceed maximum number of subscriptions": [
          "Enforce maximum number of subscriptions for an area"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.dss.token_validation.TokenValidation": {
      "Setup": {
        "Ensure clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      },
      "Token validation": {
        "Token validation": [
          "Read scope cannot create an ISA",
          "Missing token prevents creating an ISA",
          "Fake token prevents creating an ISA",
          "Correct token and scope can create ISA",
          "Missing token prevents reading an ISA",
          "Fake token prevents reading an ISA",
          "Read scope cannot mutate an ISA",
          "Missing token prevents mutating an ISA",
          "Proper token is allowed to search for ISAs",
          "Fake token cannot mutate an ISA",
          "Fake token cannot search for ISAs",
          "Missing token cannot search for ISAs",
          "Read scope cannot delete an ISA",
          "Missing token prevents ISA deletion",
          "Fake token cannot delete an ISA",
          "Correct token and scope can delete ISA",
          "Notified subscriber"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.dss_interoperability.DSSInteroperability": {
      "Interoperability sequence": {
        "S1": [
          "ISA[P] created with proper response"
        ],
        "S10": [
          "ISA[P] created with proper response",
          "All Subscription[i] 1\u2264i\u2264n returned in subscribers"
        ],
        "S11": [
          "ISA[P] deleted with proper response",
          "All Subscription[i] 1\u2264i\u2264n returned in subscribers"
        ],
        "S12": [
          "ISA[P] created with proper response",
          "None of Subscription[i] 1\u2264i\u2264n returned in subscribers"
        ],
        "S13": [
          "Subscriptions queried successfully",
          "No Subscription[i] 1\u2264i\u2264n returned with proper response"
        ],
        "S14": [
          "404 with proper response"
        ],
        "S15": [
          "ISA[P] deleted with proper response",
          "None of Subscription[i] 1\u2264i\u2264n returned in subscribers with proper response"
        ],
        "S16": [
          "Subscription[n] created with proper response",
          "service_areas does not include ISA from S12"
        ],
        "S2": [
          "Subscription[n] created with proper response",
          "service_areas includes ISA from S1",
          "ID of ISA from S1 is properly synchronized with all DSS",
          "Owner of ISA from S1 is properly synchronized with all DSS",
          "URL of ISA from S1 is properly synchronized with all DSS",
          "Start/end times of ISA from S1 are properly synchronized with all DSS"
        ],
        "S3": [
          "Subscription[P] returned with proper response",
          "Subscription[P] ID is properly synchronized with all DSS",
          "Subscription[P] owner is properly synchronized with all DSS",
          "Subscription[P] URL is properly synchronized with all DSS",
          "Subscription[P] start/end times are properly synchronized with all DSS",
          "Subscription[P] notification count is properly synchronized with all DSS"
        ],
        "S4": [
          "Can query all Subscriptions in area from all DSSs"
        ],
        "S5": [
          "Can get ISA from primary DSS",
          "Can modify ISA in primary DSS"
        ],
        "S7": [
          "404 with proper response"
        ],
        "S8": [
          "Subscriptions queried successfully",
          "No Subscription[i] 1\u2264i\u2264n returned with proper response"
        ],
        "S9": [
          "Subscription[n] created with proper response",
          "service_areas does not include ISA from S1"
        ]
      },
      "Prerequisites": {
        "Test environment requirements": [
          "DSS instance is reachable"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.misbehavior.Misbehavior": {
      "Invalid requests": {
        "Injection": [
          "Valid flight"
        ],
        "Unauthenticated requests": [
          "Missing credentials"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.networked_uas_disconnect.NetworkedUASDisconnect": {
      "Networked UAS disconnect": {
        "Service Provider polling": [
          "Premature flight",
          "Missing flight",
          "Lingering flight"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.nominal_behavior.NominalBehavior": {
      "Nominal flight": {
        "Injection": [
          "Valid flight"
        ],
        "Observer polling": [
          "Minimal obfuscation distance of individual flights",
          "Individual flights obfuscation",
          "Minimal obfuscation distance of multiple flights clusters",
          "Clustering count",
          "Minimal display area of clusters",
          "Premature flight",
          "Missing flight",
          "Lingering flight"
        ],
        "Service Provider polling": [
          "Premature flight",
          "Missing flight",
          "Lingering flight"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.operator_interactions.OperatorInteractions": {
      "Failed ISA": {
        "Enumerate operator notifications": [
          "Operator notified of discoverability failure"
        ],
        "Inject flight": [
          "Flight failed"
        ]
      },
      "In-flight notifications": {
        "Poll Service Provider": [
          "Insufficient telemetry operator notification",
          "Missing data operator notification"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.sp_notification_behavior.ServiceProviderNotificationBehavior": {
      "Service Provider notification behavior": {
        "Injection": [
          "Valid flight"
        ],
        "Mock USS Subscription": [
          "Subscription creation succeeds"
        ]
      },
      "Setup": {
        "Clean workspace": [
          "Successful ISA query",
          "Removed pre-existing ISA",
          "Notified subscriber",
          "Successful subscription search query",
          "Subscription can be queried by ID",
          "Subscription can be deleted"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.sp_operator_notify_missing_fields.SpOperatorNotifyMissingFields": {
      "Missing fields flight": {
        "Injection": [
          "Valid flight"
        ]
      }
    },
    "scenarios.astm.netrid.v22a.sp_operator_notify_slow_update.ServiceProviderNotifiesSlowUpdates": {
      "Slow updates flight": {
        "Injection": [
          "Valid flight"
        ],
        "Service Provider polling": [
          "Premature flight",
          "Missing flight",
          "Lingering flight"
        ]
      }
    },
    "scenarios.astm.utm.dss.synchronization.constraint_ref_synchronization.CRSynchronization": {
      "CR synchronization": {
        "Retrieve newly created CR": [
          "Newly created CR can be consistently retrieved from all DSS instances"
        ],
        "Retrieve updated CR": [
          "Updated CR can be consistently retrieved from all DSS instances"
        ],
        "Search for newly created CR": [
          "Newly created CR can be consistently searched for from all DSS instances"
        ],
        "Search for updated CR": [
          "Updated CR can be consistently searched for from all DSS instances"
        ]
      }
    },
    "scenarios.astm.utm.dss.synchronization.op_intent_ref_synchronization.OIRSynchronization": {
      "OIR synchronization": {
        "Retrieve newly created OIR": [
          "Newly created OIR can be consistently retrieved from all DSS instances"
        ],
        "Retrieve updated OIR": [
          "Updated OIR can be consistently retrieved from all DSS instances"
        ],
        "Search for newly created OIR": [
          "Newly created OIR can be consistently searched for from all DSS instances"
        ],
        "Search for updated OIR": [
          "Updated OIR can be consistently searched for from all DSS instances"
        ]
      }
    },
    "scenarios.astm.utm.flight_intent_validation.flight_intent_validation.FlightIntentValidation": {
      "Validate precision of intersection computations": {
        "Attempt to plan Tiny Overlap Conflict Flight": [
          "Failure"
        ]
      }
    },
    "scenarios.eurocae.ed269.source_data_model.SourceDataModelValidation": {
      "ED-269 data model compliance": {
        "Valid source": [
          "Valid JSON",
          "Valid schema and values"
        ]
      }
    },
    "scenarios.faa.uft.message_signing_finalize.FinalizeMessageSigningReport": {
      "Finalize message signing": {
        "Signal mock USS": [
          "Successful finalization",
          "All message signing headers present",
          "Valid content digests",
          "Valid signature"
        ]
      }
    },
    "scenarios.faa.uft.message_signing_start.StartMessageSigningReport": {
      "Start message signing": {
        "Check mock USS readiness": [
          "Status ok",
          "Ready"
        ],
        "Signal mock USS": [
          "Successful start"
        ]
      }
    },
    "scenarios.interuss.mock_uss.configure_locality.ConfigureLocality": {
      "Set locality": {
        "Get current locality value": [
          "Query ok"
        ],
        "Set locality to desired value": [
          "Query ok"
        ]
      }
    },
    "scenarios.interuss.mock_uss.unconfigure_locality.UnconfigureLocality": {
      "Restore locality": {
        "Set locality to old value": [
          "Query ok"
        ]
      }
    },
    "scenarios.versioning.get_system_versions.GetSystemVersions": {
      "Get versions": {
        "Get versions": [
          "Valid response"
        ]
      }
    }
  }
}