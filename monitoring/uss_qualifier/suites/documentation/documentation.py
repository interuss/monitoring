import glob
import inspect
import os
from typing import Iterator, Optional

from implicitdict import ImplicitDict

from monitoring.uss_qualifier.fileio import (
    load_dict_with_references,
    get_package_name,
    resolve_filename,
)
from monitoring.uss_qualifier.scenarios.documentation.parsing import get_documentation
from monitoring.uss_qualifier.scenarios.scenario import get_scenario_type_by_name
from monitoring.uss_qualifier.suites.definitions import TestSuiteDefinition, ActionType


def find_test_suites(start_path: Optional[str] = None) -> Iterator[str]:
    if start_path is None:
        start_path = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
    for yaml in glob.glob(os.path.join(start_path, "*.yaml")):
        yield yaml
    for subfolder in os.listdir(start_path):
        full_path = os.path.join(start_path, subfolder)
        if not os.path.isdir(full_path):
            continue
        for suite in find_test_suites(full_path):
            yield suite


def make_test_suite_documentation(test_suite_yaml_file: str) -> str:
    lines = []
    suite_def: TestSuiteDefinition = ImplicitDict.parse(
        load_dict_with_references("file://" + test_suite_yaml_file), TestSuiteDefinition
    )
    lines.append(
        "<!--This file is autogenerated via `make format`; do not change manually-->"
    )
    lines.append(f"# {suite_def.name} test suite")
    local_path = os.path.split(test_suite_yaml_file)[-1]
    lines.append(f"[`{get_package_name(test_suite_yaml_file)}`](./{local_path})")
    lines.append("")

    lines.append("## Actions")
    lines.append("")
    base_path = os.path.dirname(test_suite_yaml_file)
    for i, action in enumerate(suite_def.actions):
        action_type = action.get_action_type()
        if action_type == ActionType.TestScenario:
            scenario_type = get_scenario_type_by_name(
                action.test_scenario.scenario_type
            )
            py_rel_path = os.path.relpath(inspect.getfile(scenario_type), base_path)
            scenario_doc = get_documentation(scenario_type)
            doc_rel_path = os.path.relpath(scenario_doc.local_path, start=base_path)
            lines.append(
                f"{i + 1}. Scenario: [{scenario_doc.name}]({doc_rel_path}) ([`{action.test_scenario.scenario_type}`]({py_rel_path}))"
            )
        elif action_type == ActionType.TestSuite:
            if "suite_type" in action.test_suite and action.test_suite.suite_type:
                suite_def = ImplicitDict.parse(
                    load_dict_with_references(action.test_suite.suite_type),
                    TestSuiteDefinition,
                )
                suite_path = resolve_filename(action.test_suite.suite_type)
                suite_rel_path = os.path.relpath(suite_path, start=base_path)
                doc_path = os.path.splitext(suite_path)[0] + ".md"
                doc_rel_path = os.path.relpath(doc_path, start=base_path)
                lines.append(
                    f"{i + 1}. Suite: [{suite_def.name}]({doc_rel_path}) ([`{action.test_suite.suite_type}`]({suite_rel_path}))"
                )
            elif "suite_definition" in action.test_suite and action.suite_definition:
                # TODO: Generate additional test suite documentation for in-suite suite definition
                lines.append(f"{i + 1}. Suite: <in-suite definition>")
            else:
                raise ValueError(
                    f"Test suite action {i + 1} missing suite type or definition in {test_suite_yaml_file}"
                )
        elif action_type == ActionType.ActionGenerator:
            # TODO: Add documentation for action generators
            lines.append(
                f"{i + 1}. Action generator: `{action.action_generator.generator_type}`"
            )
        else:
            raise NotImplementedError(
                f"Unsupported test suite action type: {action_type}"
            )

    lines.append("")
    return "\n".join(lines)
