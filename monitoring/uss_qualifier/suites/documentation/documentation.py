import glob
import inspect
import os
from dataclasses import dataclass
from typing import Iterator, Optional, List, Union, Dict

from implicitdict import ImplicitDict
from monitoring.uss_qualifier.action_generators.action_generator import (
    action_generator_type_from_name,
)
from monitoring.uss_qualifier.action_generators.definitions import (
    ActionGeneratorDefinition,
)
from monitoring.uss_qualifier.action_generators.documentation.definitions import (
    PotentialGeneratedAction,
    PotentialActionGeneratorAction,
)
from monitoring.uss_qualifier.action_generators.documentation.documentation import (
    list_potential_actions_for_action_generator_definition,
)

from monitoring.uss_qualifier.fileio import (
    load_dict_with_references,
    get_package_name,
    resolve_filename,
    FileReference,
)
from monitoring.uss_qualifier.scenarios.definitions import TestScenarioTypeName
from monitoring.uss_qualifier.scenarios.documentation.parsing import get_documentation
from monitoring.uss_qualifier.scenarios.scenario import get_scenario_type_by_name
from monitoring.uss_qualifier.suites.definitions import (
    TestSuiteDefinition,
    ActionType,
    TestSuiteActionDeclaration,
)


@dataclass
class TestSuiteRenderContext(object):
    parent_yaml_file: str
    parent_doc_file: str
    base_path: str
    list_index: int
    indent: int
    test_suites: Dict[str, str]


def find_test_suites(start_path: Optional[str] = None) -> Iterator[str]:
    if start_path is None:
        start_path = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
    for yaml in glob.glob(os.path.join(start_path, "*.yaml")):
        yield yaml
    for subfolder in os.listdir(start_path):
        full_path = os.path.join(start_path, subfolder)
        if not os.path.isdir(full_path):
            continue
        for suite in find_test_suites(full_path):
            yield suite


def make_test_suite_documentation(
    suite_def: TestSuiteDefinition,
    suite_yaml_file: str,
    suite_doc_file: str,
    parent_suite_doc: Optional[str] = None,
) -> Dict[str, str]:
    test_suites: Dict[str, str] = {}

    lines = []
    lines.append(
        "<!--This file is autogenerated via `make format`; do not change manually-->"
    )
    lines.append(f"# {suite_def.name} test suite")
    local_path = os.path.split(suite_yaml_file)[-1]
    if parent_suite_doc is None:
        prefix = ""
    else:
        parent_rel_path = os.path.relpath(
            parent_suite_doc, start=os.path.dirname(suite_doc_file)
        )
        prefix = f"Defined in [parent suite]({parent_rel_path}) "
    lines.append(f"{prefix}[`{get_package_name(suite_yaml_file)}`](./{local_path})")
    lines.append("")

    lines.append("## Actions")
    lines.append("")
    base_path = os.path.dirname(suite_yaml_file)
    for i, action in enumerate(suite_def.actions):
        lines.extend(
            _render_action(
                action,
                TestSuiteRenderContext(
                    parent_yaml_file=suite_yaml_file,
                    parent_doc_file=suite_doc_file,
                    base_path=base_path,
                    list_index=i + 1,
                    indent=0,
                    test_suites=test_suites,
                ),
            )
        )

    lines.append("")
    test_suites[suite_doc_file] = "\n".join(lines)
    return test_suites


def _render_scenario(
    scenario_type_name: TestScenarioTypeName, context: TestSuiteRenderContext
) -> List[str]:
    lines = []
    scenario_type = get_scenario_type_by_name(scenario_type_name)
    py_rel_path = os.path.relpath(inspect.getfile(scenario_type), context.base_path)
    scenario_doc = get_documentation(scenario_type)
    doc_rel_path = os.path.relpath(scenario_doc.local_path, start=context.base_path)
    lines.append(
        f"{' ' * context.indent}{context.list_index}. Scenario: [{scenario_doc.name}]({doc_rel_path}) ([`{scenario_type_name}`]({py_rel_path}))"
    )
    return lines


def _render_suite_by_type(
    suite_type: FileReference, context: TestSuiteRenderContext
) -> List[str]:
    lines = []
    suite_def = ImplicitDict.parse(
        load_dict_with_references(suite_type),
        TestSuiteDefinition,
    )
    suite_path = resolve_filename(suite_type)
    suite_rel_path = os.path.relpath(suite_path, start=context.base_path)
    doc_path = os.path.splitext(suite_path)[0] + ".md"
    doc_rel_path = os.path.relpath(doc_path, start=context.base_path)
    lines.append(
        f"{' ' * context.indent}{context.list_index}. Suite: [{suite_def.name}]({doc_rel_path}) ([`{suite_type}`]({suite_rel_path}))"
    )
    return lines


def _render_suite_by_definition(
    suite_def: TestSuiteDefinition, context: TestSuiteRenderContext
) -> List[str]:
    doc_path = (
        os.path.splitext(context.parent_doc_file)[0] + f"_suite{context.list_index}.md"
    )
    new_docs = make_test_suite_documentation(
        suite_def, context.parent_yaml_file, doc_path, context.parent_doc_file
    )

    for k, v in new_docs.items():
        context.test_suites[k] = v

    doc_rel_path = os.path.relpath(doc_path, context.base_path)
    parent_rel_path = os.path.relpath(context.parent_yaml_file, start=context.base_path)
    return [
        f"{' ' * context.indent}{context.list_index}. Suite: [{suite_def.name}]({doc_rel_path}) ([in-suite definition]({parent_rel_path}))"
    ]


def _render_action_generator(
    generator_def: Union[ActionGeneratorDefinition, PotentialActionGeneratorAction],
    context: TestSuiteRenderContext,
) -> List[str]:
    lines = []
    action_generator_type = action_generator_type_from_name(
        generator_def.generator_type
    )
    py_rel_path = os.path.relpath(
        inspect.getfile(action_generator_type), start=context.base_path
    )
    lines.append(
        f"{' ' * context.indent}{context.list_index}. Action generator: [`{generator_def.generator_type}`]({py_rel_path})"
    )
    potential_actions = list_potential_actions_for_action_generator_definition(
        generator_def
    )
    for j, potential_action in enumerate(potential_actions):
        lines.extend(
            _render_action(
                potential_action,
                TestSuiteRenderContext(
                    parent_yaml_file=context.parent_yaml_file,
                    parent_doc_file=context.parent_doc_file,
                    base_path=context.base_path,
                    list_index=j + 1,
                    indent=context.indent + 4,
                    test_suites=context.test_suites,
                ),
            )
        )
    return lines


def _render_action(
    action: Union[TestSuiteActionDeclaration, PotentialGeneratedAction],
    context: TestSuiteRenderContext,
) -> List[str]:
    action_type = action.get_action_type()
    if action_type == ActionType.TestScenario:
        return _render_scenario(action.test_scenario.scenario_type, context)
    elif action_type == ActionType.TestSuite:
        if "suite_type" in action.test_suite and action.test_suite.suite_type:
            return _render_suite_by_type(action.test_suite.suite_type, context)
        elif (
            "suite_definition" in action.test_suite
            and action.test_suite.suite_definition
        ):
            return _render_suite_by_definition(
                action.test_suite.suite_definition, context
            )
        else:
            raise ValueError(
                f"Test suite action {context.list_index} missing suite type or definition"
            )
    elif action_type == ActionType.ActionGenerator:
        return _render_action_generator(action.action_generator, context)
    else:
        raise NotImplementedError(f"Unsupported test suite action type: {action_type}")
