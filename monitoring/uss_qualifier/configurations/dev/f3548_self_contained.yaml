# See the file below (in the `schemas` folder of this repo) for the schema this file's content follows
$content_schema: monitoring/uss_qualifier/configurations/configuration/USSQualifierConfiguration.json

# This configuration uses the v1 configuration schema
v1:
  # This block defines how to perform a test run
  test_run:
    # This block defines which test action uss_qualifier should run, and what resources from the pool should be used
    action:
      test_suite:
        # suite_type is a FileReference (defined in uss_qualifier/file_io.py) to a test suite definition (see uss_qualifier/suites/README.md)
        suite_type: suites.astm.utm.f3548_21

        # Mapping of <resource name in test suite> to <resource name in resource pool>
        resources:
          flight_planners: flight_planners
          conflicting_flights: conflicting_flights
          invalid_flight_intents: invalid_flight_intents
          non_conflicting_flights: non_conflicting_flights
          dss: dss
          dss_instances: dss_instances
          mock_uss: mock_uss

    # This block defines all the resources available in the resource pool.
    # Presumably all resources defined below would be used either
    #   1) directly in the test suite or
    #   2) to create another resource in the pool (see, e.g., `utm_auth` as it relates to `dss` below)
    resources:
      resource_declarations:
        # Means by which uss_qualifier can obtain authorization to make requests in an ASTM USS ecosystem
        utm_auth:
          # resource_type is a ResourceTypeName (defined in uss_qualifier/resources/definitions.py)
          resource_type: resources.communications.AuthAdapterResource
          specification:
            # To avoid putting secrets in configuration files, the auth spec (including sensitive information) will be read from the AUTH_SPEC environment variable
            environment_variable_containing_auth_spec: AUTH_SPEC

        # Set of USSs capable of being tested as flight planners
        flight_planners:
          resource_type: resources.flight_planning.FlightPlannersResource
          dependencies:
            auth_adapter: utm_auth
          specification:
            flight_planners:
              # uss1 is the mock_uss directly exposing flight planning functionality
              - participant_id: uss1
                v1_base_url: http://scdsc.uss1.localutm/flight_planning/v1
              # uss2 is another mock_uss directly exposing flight planning functionality
              - participant_id: uss2
                v1_base_url: http://scdsc.uss2.localutm/flight_planning/v1

        # Details of conflicting flights (used in nominal planning scenario)
        conflicting_flights:
          resource_type: resources.flight_planning.FlightIntentsResource
          specification:
            file:
              path: file://./test_data/che/flight_intents/conflicting_flights.yaml

        # Details of flights with invalid operational intents (used in flight intent validation scenario)
        invalid_flight_intents:
          resource_type: resources.flight_planning.FlightIntentsResource
          specification:
            intent_collection:
              $ref: test_data.che.flight_intents.invalid_flight_intents

        # Details of non-conflicting flights (used in data validation scenario)
        non_conflicting_flights:
          resource_type: resources.flight_planning.FlightIntentsResource
          specification:
            intent_collection:
              $ref: file://../../test_data/usa/kentland/flight_intents/non_conflicting.yaml

        # Location of DSS instance that can be used to verify flight planning outcomes
        dss:
          resource_type: resources.astm.f3548.v21.DSSInstanceResource
          dependencies:
            auth_adapter: utm_auth
          specification:
            # A USS that hosts a DSS instance is also a participant in the test, even if they don't fulfill any other roles
            participant_id: uss1
            base_url: http://dss.uss1.localutm

        dss_instances:
            resource_type: resources.astm.f3548.v21.DSSInstancesResource
            dependencies:
                auth_adapter: utm_auth
            specification:
              dss_instances:
                - participant_id: uss1
                  base_url: http://dss.uss1.localutm
                  has_private_address: true
                - participant_id: uss2
                  base_url: http://dss.uss2.localutm
                  has_private_address: true

        # Mock USS that can be used in tests for flight planning, modifying data sharing behavior and recording interactions
        mock_uss:
          resource_type: resources.interuss.mock_uss.client.MockUSSResource
          dependencies:
            auth_adapter: utm_auth
          specification:
            participant_id: mock_uss
            mock_uss_base_url: http://scdsc.log.uss6.localutm


    # When a test run is executed, a "baseline signature" is computed uniquely identifying the "baseline" of the test,
    # usually excluding exactly what systems are participating in the test (the "environment").  This is a list of
    # elements within this configuration to exclude from the configuration when computing the baseline signature.
    non_baseline_inputs:
      - v1.test_run.resources.resource_declarations.utm_auth
      - v1.test_run.resources.resource_declarations.flight_planners
      - v1.test_run.resources.resource_declarations.dss
      - v1.test_run.resources.resource_declarations.mock_uss

    # How to execute a test run using this configuration
    execution:
      # Since we expect no failed checks and want to stop execution immediately if there are any failed checks, we set
      # this parameter to true.
      stop_fast: true

  # This block defines artifacts related to the test run.  Note that all paths are
  # relative to where uss_qualifier is executed from, and are located inside the
  # Docker container executing uss_qualifier.
  artifacts:
    # Write artifacts to this folder (relative to uss_qualifier)
    output_path: output/f3548

    # Write out full report content
    raw_report: {}

    # Write out a human-readable report of the F3548-21 requirements tested
    tested_requirements:
      - report_name: requirements
        requirement_collections:
          scd:
            requirement_collections:
              - requirement_sets:
                  - astm.f3548.v21.scd
        participant_requirements:
          uss1: scd
          uss2: scd

    # Write out a human-readable report showing the sequence of events of the test
    sequence_view: {}

  # This block defines whether to return an error code from the execution of uss_qualifier, based on the content of the
  # test run report.  All of the criteria must be met to return a successful code.
  validation:
    criteria:
      # applicability indicates which test report elements the pass_condition applies to
      - applicability:
          # We want to make sure no test scenarios had execution errors
          test_scenarios: {}
        pass_condition:
          each_element:
            has_execution_error: false
      - applicability:
          # We also want to make sure there are no failed checks...
          failed_checks:
            # ...at least, no failed checks with severity higher than "Low".
            has_severity:
              higher_than: Low
        pass_condition:
          # When considering all of the applicable elements...
          elements:
            # ...the number of applicable elements should be zero.
            count:
              equal_to: 0
